{
  "name": "passport-me2day",
  "version": "0.1.0",
  "description": "Me2day authentication strategy for Passport.",
  "author": {
    "name": "JeongHoon Byun",
    "email": "outsideris@gmail.com",
    "url": "http://sideeffect.kr/"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/outsideris/passport-me2day.git"
  },
  "bugs": {
    "url": "http://github.com/outsideris/passport-me2day/issues"
  },
  "main": "./lib/passport-me2day",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport": "~0.1.3"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "passport",
    "me2day",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "readme": "# Passport-Me2day\n\n[Passport](https://github.com/jaredhanson/passport) strategy for authenticating\nwith [me2day](http://me2day.net/).\n\nThis module lets you authenticate using me2day in your Node.js applications.\nBy plugging into Passport, me2day authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Installation\n\n    $ npm install passport-me2day\n\n## Usage\n\n#### Configure Strategy\n\nThe BrowserID authentication strategy authenticates users using an assertion of\nemail address ownership, obtained via the BrowserID JavaScript API.  The\nstrategy requires a `validate` callback, which accepts an email address and calls\n`done` providing a user.\n\nThe me2day authentication strategy authenticates users using a me2day account,\nuserKey and nonce. The strategy requires a `verify` callback, which receives\nthe userKey, as well as `profile` which contains the authenticated user's\nme2day profile. The `verify` callback must call `done` providing a user\nto complete authentication.\n\nIn order to identify your application to me2day, specify the userKey,\nnonce, and callback URL within `options`.  The user key is\nobtained by [requesting an application key](http://me2day.net/me2/app/get_appkey) at\n[me2day](https://me2day.net/) site.\n\n    passport.use(new Me2dayStrategy({\n        userKey: '--insert-me2day-user-key-here--'\n        , nonce: '--insert-me2day-nonce-here--'\n        , callbackURL: \"http://127.0.0.1:3000/auth/me2day/callback\"\n      },\n      function(userKey, profile, done) {\n        User.findOrCreate(profile, function (err, user) {\n          done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'me2day'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/twitter',\n      passport.authenticate('twitter'));\n\n    app.get('/auth/twitter/callback',\n      passport.authenticate('twitter', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nFor a complete, working example, refer to the [signin example](https://github.com/outsideris/passport-me2day/tree/master/examples/signin).\n\n## Credits\n\n  - [JeongHoon Byun](http://github.com/outsideris)\n\n## Licens\n\ne\n\n(The MIT License)\n\nCopyright (c) 2012 JeongHoon Byun <outsideris@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "passport-me2day@0.1.0",
  "dist": {
    "shasum": "03d451c1909526c2fbb5a817d386266f3e12f9be"
  },
  "_from": "passport-me2day@",
  "_resolved": "https://registry.npmjs.org/passport-me2day/-/passport-me2day-0.1.0.tgz"
}
